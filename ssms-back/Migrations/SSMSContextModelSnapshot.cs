// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSMS.EntityModels;

namespace SSMS.Migrations
{
    [DbContext(typeof(SSMSContext))]
    partial class SSMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SSMS.EntityModels.AcademicSemester", b =>
                {
                    b.Property<byte>("SemesterId")
                        .HasColumnName("semesterId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("SemesterEndDateG")
                        .HasColumnName("semesterEndDateG")
                        .HasColumnType("date");

                    b.Property<string>("SemesterEndDateH")
                        .HasColumnName("semesterEndDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("SemesterNameAr")
                        .HasColumnName("semesterNameAr")
                        .HasMaxLength(25);

                    b.Property<string>("SemesterNameEn")
                        .HasColumnName("semesterNameEn")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("SemesterStartDateG")
                        .HasColumnName("semesterStartDateG")
                        .HasColumnType("date");

                    b.Property<string>("SemesterStartDateH")
                        .HasColumnName("semesterStartDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<byte?>("YearId")
                        .HasColumnName("yearId");

                    b.HasKey("SemesterId");

                    b.HasIndex("YearId");

                    b.ToTable("academicSemesters");
                });

            modelBuilder.Entity("SSMS.EntityModels.AcademicWeek", b =>
                {
                    b.Property<short>("WeekId")
                        .HasColumnName("weekId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<byte?>("SemesterId")
                        .HasColumnName("semesterId");

                    b.Property<DateTime?>("WeekEndDateG")
                        .HasColumnType("date");

                    b.Property<string>("WeekEndDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("WeekNameAr")
                        .HasColumnName("weekNameAr")
                        .HasMaxLength(25);

                    b.Property<string>("WeekNameEn")
                        .HasColumnName("weekNameEn")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("WeekStartDateG")
                        .HasColumnName("weekStartDateG")
                        .HasColumnType("date");

                    b.Property<string>("WeekStartDateH")
                        .HasColumnName("weekStartDateH")
                        .HasColumnType("nchar(10)");

                    b.HasKey("WeekId");

                    b.HasIndex("SemesterId");

                    b.ToTable("academicWeeks");
                });

            modelBuilder.Entity("SSMS.EntityModels.AcademicYear", b =>
                {
                    b.Property<byte>("YearId")
                        .HasColumnName("yearId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("YearEndDateG")
                        .HasColumnName("yearEndDateG")
                        .HasColumnType("date");

                    b.Property<string>("YearEndDateH")
                        .HasColumnName("yearEndDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("YearNameG")
                        .HasColumnName("yearNameG")
                        .HasMaxLength(10);

                    b.Property<string>("YearNameH")
                        .HasColumnName("yearNameH")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("YearStartDateG")
                        .HasColumnName("yearStartDateG")
                        .HasColumnType("date");

                    b.Property<string>("YearStartDateH")
                        .HasColumnName("yearStartDateH")
                        .HasColumnType("nchar(10)");

                    b.HasKey("YearId");

                    b.ToTable("academicYears");
                });

            modelBuilder.Entity("SSMS.EntityModels.AccountStatus", b =>
                {
                    b.Property<byte>("StatusId")
                        .HasColumnName("statusId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("StatusAr")
                        .HasColumnName("statusAr")
                        .HasMaxLength(20);

                    b.Property<string>("StatusEn")
                        .HasColumnName("statusEn")
                        .HasMaxLength(20);

                    b.HasKey("StatusId");

                    b.ToTable("accountStatus");
                });

            modelBuilder.Entity("SSMS.EntityModels.Action", b =>
                {
                    b.Property<short>("ActionId")
                        .HasColumnName("actionId");

                    b.Property<string>("ActionNameAr")
                        .HasColumnName("actionNameAr")
                        .HasMaxLength(100);

                    b.Property<string>("ActionNameEn")
                        .HasColumnName("actionNameEn")
                        .HasMaxLength(100);

                    b.Property<string>("ActionUrl")
                        .HasColumnName("actionUrl")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("ActionId");

                    b.ToTable("actions");
                });

            modelBuilder.Entity("SSMS.EntityModels.BehavioralViolation", b =>
                {
                    b.Property<short>("ViolationId")
                        .HasColumnName("violationId");

                    b.Property<byte?>("CategoryId")
                        .HasColumnName("categoryId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("ViolationNameAr")
                        .HasColumnName("violationNameAr")
                        .HasMaxLength(150);

                    b.Property<string>("ViolationNameEn")
                        .HasColumnName("violationNameEn")
                        .HasMaxLength(150);

                    b.HasKey("ViolationId");

                    b.ToTable("behavioralViolations");
                });

            modelBuilder.Entity("SSMS.EntityModels.Branch", b =>
                {
                    b.Property<byte>("BranchId")
                        .HasColumnName("branchId");

                    b.Property<string>("BranchNameAr")
                        .HasColumnName("branchNameAr")
                        .HasMaxLength(8);

                    b.Property<string>("BranchNameEn")
                        .HasColumnName("branchNameEn")
                        .HasMaxLength(8);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<byte?>("SchoolId")
                        .HasColumnName("schoolId");

                    b.HasKey("BranchId");

                    b.HasIndex("SchoolId");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("SSMS.EntityModels.Classrooms", b =>
                {
                    b.Property<short>("ClassroomId")
                        .HasColumnName("classroomId");

                    b.Property<string>("ClassNameAr")
                        .HasColumnName("classNameAr")
                        .HasMaxLength(25);

                    b.Property<string>("ClassNameEn")
                        .HasColumnName("classNameEn")
                        .HasMaxLength(25);

                    b.Property<byte?>("GradeId")
                        .HasColumnName("gradeId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("ClassroomId");

                    b.HasIndex("GradeId");

                    b.ToTable("classrooms");
                });

            modelBuilder.Entity("SSMS.EntityModels.ClassStudent", b =>
                {
                    b.Property<int>("ClassStudentId")
                        .HasColumnName("classStudentId");

                    b.Property<short?>("ClassroomId")
                        .HasColumnName("classroomId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("endDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startDate")
                        .HasColumnType("date");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnName("studentId")
                        .HasColumnType("char(10)");

                    b.Property<byte?>("YearId")
                        .HasColumnName("yearId");

                    b.HasKey("ClassStudentId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("StudentId");

                    b.HasIndex("YearId");

                    b.ToTable("classesStudents");
                });

            modelBuilder.Entity("SSMS.EntityModels.Country", b =>
                {
                    b.Property<byte>("CountryId")
                        .HasColumnName("countryId");

                    b.Property<string>("CountryAr")
                        .HasColumnName("countryAr")
                        .HasMaxLength(50);

                    b.Property<string>("CountryEn")
                        .HasColumnName("countryEn")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("CountryId");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("SSMS.EntityModels.Department", b =>
                {
                    b.Property<byte>("DepartmentId")
                        .HasColumnName("departmentId");

                    b.Property<string>("DepartmentNameAr")
                        .HasColumnName("departmentNameAr")
                        .HasMaxLength(100);

                    b.Property<string>("DepartmentNameEn")
                        .HasColumnName("departmentNameEn")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("DepartmentId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("SSMS.EntityModels.DocType", b =>
                {
                    b.Property<byte>("DocTypeId")
                        .HasColumnName("docTypeId");

                    b.Property<string>("DocTypeAr")
                        .HasColumnName("docTypeAr")
                        .HasMaxLength(50);

                    b.Property<string>("DocTypeEn")
                        .HasColumnName("docTypeEn")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("DocTypeId");

                    b.ToTable("docTypes");
                });

            modelBuilder.Entity("SSMS.EntityModels.Employee", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnName("empId")
                        .HasColumnType("char(10)");

                    b.Property<string>("AddressHome")
                        .HasColumnName("addressHome");

                    b.Property<string>("AddressKsa")
                        .HasColumnName("addressKsa");

                    b.Property<DateTime?>("BirthDateG")
                        .HasColumnName("birthDateG")
                        .HasColumnType("date");

                    b.Property<string>("BirthDateH")
                        .HasColumnName("birthDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("BirthPlace")
                        .HasColumnName("birthPlace")
                        .HasMaxLength(50);

                    b.Property<string>("CertificateDate")
                        .HasColumnName("certificateDate")
                        .HasColumnType("nchar(7)");

                    b.Property<byte?>("CertificateDegree")
                        .HasColumnName("certificateDegree");

                    b.Property<byte?>("CertificateGrade")
                        .HasColumnName("certificateGrade");

                    b.Property<string>("CertificateMajor")
                        .HasColumnName("certificateMajor")
                        .HasMaxLength(50);

                    b.Property<string>("CertificateName")
                        .HasColumnName("certificateName");

                    b.Property<byte?>("CountryId")
                        .HasColumnName("countryId");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("FNameAr")
                        .HasColumnName("fNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("FNameEn")
                        .HasColumnName("fNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("GNameAr")
                        .HasColumnName("gNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("GNameEn")
                        .HasColumnName("gNameEn")
                        .HasMaxLength(20);

                    b.Property<bool?>("Gender")
                        .HasColumnName("gender");

                    b.Property<bool?>("HasDrivingLicense")
                        .HasColumnName("hasDrivingLicense");

                    b.Property<DateTime?>("IdExpireDateG")
                        .HasColumnType("date");

                    b.Property<string>("IdExpireDateH")
                        .HasColumnName("idExpireDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("IdIssuePlace")
                        .HasMaxLength(50);

                    b.Property<byte?>("IdType");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsHandicapped")
                        .HasColumnName("isHandicapped");

                    b.Property<string>("LNameAr")
                        .HasColumnName("lNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("LNameEn")
                        .HasColumnName("lNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("MNameAr")
                        .HasColumnName("mNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("MNameEn")
                        .HasColumnName("mNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("MaritalStatus")
                        .HasColumnName("maritalStatus")
                        .HasMaxLength(10);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasMaxLength(15);

                    b.Property<string>("Mobile2")
                        .HasColumnName("mobile2")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("PasspoerExpireDateG")
                        .HasColumnName("passpoerExpireDateG")
                        .HasColumnType("date");

                    b.Property<string>("PasspoerExpireDateH")
                        .HasColumnName("passpoerExpireDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("PassportNum")
                        .HasColumnName("passportNum")
                        .HasMaxLength(15);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(15);

                    b.Property<string>("PoBox")
                        .HasColumnName("poBox")
                        .HasMaxLength(10);

                    b.Property<string>("PoCode")
                        .HasColumnName("poCode")
                        .HasMaxLength(10);

                    b.Property<string>("RelativeAddress")
                        .HasColumnName("relativeAddress");

                    b.Property<string>("RelativeMobile")
                        .HasColumnName("relativeMobile")
                        .HasMaxLength(15);

                    b.Property<string>("RelativeName")
                        .HasColumnName("relativeName")
                        .HasMaxLength(60);

                    b.Property<string>("RelativePhone")
                        .HasColumnName("relativePhone")
                        .HasMaxLength(15);

                    b.Property<string>("Religion")
                        .HasColumnName("religion")
                        .HasMaxLength(15);

                    b.Property<string>("SpecialNeeds")
                        .HasColumnName("specialNeeds");

                    b.HasKey("EmpId");

                    b.HasIndex("CountryId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeAction", b =>
                {
                    b.Property<int>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<short>("ActionId")
                        .HasColumnName("actionId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("EmpJobId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("employeesActions");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeFinance", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnName("empId")
                        .HasColumnType("char(10)");

                    b.Property<string>("BankAccount")
                        .HasColumnName("bankAccount")
                        .HasMaxLength(50);

                    b.Property<string>("BankIban")
                        .HasColumnName("bankIban")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .HasColumnName("bankName")
                        .HasMaxLength(50);

                    b.Property<decimal?>("BasicSalary")
                        .HasColumnName("basicSalary")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("Debts")
                        .HasColumnName("debts")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("ExperienceAllowance")
                        .HasColumnName("experienceAllowance")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("HousingAllowance")
                        .HasColumnName("housingAllowance")
                        .HasColumnType("smallmoney");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<decimal?>("Loans")
                        .HasColumnName("loans")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("OtherAllowance")
                        .HasColumnName("otherAllowance")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("TotalSalary")
                        .HasColumnName("totalSalary")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("TransportAllowance")
                        .HasColumnName("transportAllowance")
                        .HasColumnType("smallmoney");

                    b.HasKey("EmpId");

                    b.ToTable("employeesFinance");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeHr", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnName("empId")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("CeoApproval")
                        .HasColumnName("ceoApproval")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ContractType")
                        .HasColumnName("contractType")
                        .HasMaxLength(15);

                    b.Property<string>("HrNotes")
                        .HasColumnName("hrNotes");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("JobInId")
                        .HasColumnName("jobInId")
                        .HasMaxLength(50);

                    b.Property<bool?>("NoorRegistered")
                        .HasColumnName("noorRegistered");

                    b.Property<DateTime?>("SalahiaDateG")
                        .HasColumnType("date");

                    b.Property<string>("SalahiaDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<int?>("SalahiaNum");

                    b.Property<int?>("SocialSecurityNum")
                        .HasColumnName("socialSecurityNum");

                    b.Property<bool?>("SocialSecuritySubscription")
                        .HasColumnName("socialSecuritySubscription");

                    b.Property<string>("WorkStartDateH")
                        .HasColumnName("workStartDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<byte?>("WorkStatus")
                        .HasColumnName("workStatus");

                    b.Property<DateTime?>("WrokStartDateG")
                        .HasColumnName("wrokStartDateG")
                        .HasColumnType("date");

                    b.HasKey("EmpId");

                    b.ToTable("employeesHR");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeJob", b =>
                {
                    b.Property<int>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<byte?>("BranchId")
                        .HasColumnName("branchId");

                    b.Property<byte?>("DepartmentId")
                        .HasColumnName("departmentId");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnName("empId")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("endDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<short>("JobId")
                        .HasColumnName("jobId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startDate")
                        .HasColumnType("date");

                    b.HasKey("EmpJobId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmpId");

                    b.HasIndex("JobId");

                    b.ToTable("employeesJobs");
                });

            modelBuilder.Entity("SSMS.EntityModels.Grade", b =>
                {
                    b.Property<byte>("GradeId")
                        .HasColumnName("gradeId");

                    b.Property<string>("GradeNameAr")
                        .HasColumnName("gradeNameAr")
                        .HasMaxLength(25);

                    b.Property<string>("GradeNameEn")
                        .HasColumnName("gradeNameEn")
                        .HasMaxLength(25);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<byte?>("StageId")
                        .HasColumnName("stageId");

                    b.HasKey("GradeId");

                    b.HasIndex("StageId");

                    b.ToTable("grades");
                });

            modelBuilder.Entity("SSMS.EntityModels.GradesSubjects", b =>
                {
                    b.Property<short>("GradeSubjectId")
                        .HasColumnName("gradeSubjectId");

                    b.Property<byte>("GradeId")
                        .HasColumnName("gradeId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<byte?>("PeriodsCount")
                        .HasColumnName("periodsCount");

                    b.Property<byte>("SubjectId")
                        .HasColumnName("subjectId");

                    b.HasKey("GradeSubjectId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("GradeId", "SubjectId")
                        .IsUnique()
                        .HasName("ucGradeSubject");

                    b.ToTable("gradesSubjects");
                });

            modelBuilder.Entity("SSMS.EntityModels.Job", b =>
                {
                    b.Property<short>("JobId")
                        .HasColumnName("jobId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("JobDescription")
                        .HasColumnName("jobDescription");

                    b.Property<string>("JobNameAr")
                        .HasColumnName("jobNameAr")
                        .HasMaxLength(100);

                    b.Property<string>("JobNameEn")
                        .HasColumnName("jobNameEn")
                        .HasMaxLength(100);

                    b.HasKey("JobId");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("SSMS.EntityModels.JobAction", b =>
                {
                    b.Property<short>("JobId")
                        .HasColumnName("jobId");

                    b.Property<short>("ActionId")
                        .HasColumnName("actionId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("JobId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("jobsActions");
                });

            modelBuilder.Entity("SSMS.EntityModels.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnName("lessonId");

                    b.Property<short?>("GradeSubjectId")
                        .HasColumnName("gradeSubjectId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LessonObjectives")
                        .HasColumnName("lessonObjectives");

                    b.Property<string>("LessonTitle")
                        .HasColumnName("lessonTitle")
                        .HasMaxLength(150);

                    b.Property<byte?>("SemesterId")
                        .HasColumnName("semesterId");

                    b.HasKey("LessonId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("SSMS.EntityModels.LessonFile", b =>
                {
                    b.Property<int>("LessonFileId")
                        .HasColumnName("lessonFileId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("createdBy");

                    b.Property<byte?>("DocTypeId")
                        .HasColumnName("docTypeId");

                    b.Property<string>("FilePath")
                        .HasColumnName("filePath");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsExternalLink")
                        .HasColumnName("isExternalLink");

                    b.Property<int?>("LessonId")
                        .HasColumnName("lessonId");

                    b.HasKey("LessonFileId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("LessonId");

                    b.ToTable("lessonsFiles");
                });

            modelBuilder.Entity("SSMS.EntityModels.Major", b =>
                {
                    b.Property<byte>("MajorId")
                        .HasColumnName("majorId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("MajorNameAr")
                        .HasColumnName("majorNameAr")
                        .HasMaxLength(50);

                    b.Property<string>("MajorNameEn")
                        .HasColumnName("majorNameEn")
                        .HasMaxLength(50);

                    b.HasKey("MajorId");

                    b.ToTable("majors");
                });

            modelBuilder.Entity("SSMS.EntityModels.Parent", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("char(10)");

                    b.Property<byte?>("CityId")
                        .HasColumnName("cityId");

                    b.Property<byte?>("CountryId")
                        .HasColumnName("countryId")
                        .HasMaxLength(15);

                    b.Property<string>("District")
                        .HasColumnName("district");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("FNameAr")
                        .HasColumnName("fNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("FNameEn")
                        .HasColumnName("fNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("GNameAr")
                        .HasColumnName("gNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("GNameEn")
                        .HasColumnName("gNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("HouseNum")
                        .HasColumnName("houseNum")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("IdExpireDateG")
                        .HasColumnType("date");

                    b.Property<string>("IdExpireDateH")
                        .HasColumnName("idExpireDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("IdIssuePlace")
                        .HasMaxLength(50);

                    b.Property<byte?>("IdType");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Job")
                        .HasColumnName("job");

                    b.Property<string>("LNameAr")
                        .HasColumnName("lNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("LNameEn")
                        .HasColumnName("lNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("MNameAr")
                        .HasColumnName("mNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("MNameEn")
                        .HasColumnName("mNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("Mobile1")
                        .HasColumnName("mobile1")
                        .HasMaxLength(15);

                    b.Property<string>("Mobile2")
                        .HasColumnName("mobile2")
                        .HasMaxLength(15);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(15);

                    b.Property<string>("RelativeAddress")
                        .HasColumnName("relativeAddress");

                    b.Property<string>("RelativeMobile")
                        .HasColumnName("relativeMobile")
                        .HasMaxLength(15);

                    b.Property<string>("RelativeName")
                        .HasColumnName("relativeName")
                        .HasMaxLength(60);

                    b.Property<string>("RelativePhone")
                        .HasColumnName("relativePhone")
                        .HasMaxLength(15);

                    b.Property<string>("RelativeRelation")
                        .HasColumnName("relativeRelation")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasColumnName("street");

                    b.Property<string>("WorkAddress")
                        .HasColumnName("workAddress");

                    b.Property<string>("WorkPhone")
                        .HasColumnName("workPhone")
                        .HasMaxLength(15);

                    b.HasKey("ParentId");

                    b.HasIndex("CountryId");

                    b.ToTable("parents");
                });

            modelBuilder.Entity("SSMS.EntityModels.Period", b =>
                {
                    b.Property<int>("PeriodId")
                        .HasColumnName("periodId");

                    b.Property<short?>("ClasseroomId")
                        .HasColumnName("classeroomId");

                    b.Property<int?>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnName("endTime");

                    b.Property<short?>("GradeSubjectId")
                        .HasColumnName("gradeSubjectId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("PeriodDate")
                        .HasColumnName("periodDate")
                        .HasColumnType("date");

                    b.Property<short?>("SchoolDayEventId")
                        .HasColumnName("schoolDayEventId");

                    b.Property<byte?>("SemesterId")
                        .HasColumnName("semesterId");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnName("startTime");

                    b.HasKey("PeriodId");

                    b.HasIndex("ClasseroomId");

                    b.HasIndex("EmpJobId");

                    b.HasIndex("GradeSubjectId");

                    b.HasIndex("SchoolDayEventId");

                    b.HasIndex("SemesterId");

                    b.ToTable("periods");
                });

            modelBuilder.Entity("SSMS.EntityModels.PeriodDetails", b =>
                {
                    b.Property<long>("PeriodDetailId")
                        .HasColumnName("periodDetailId");

                    b.Property<TimeSpan?>("AttandanceTime")
                        .HasColumnName("attandanceTime");

                    b.Property<byte?>("HomeworkRate")
                        .HasColumnName("homeworkRate");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsEalryExit")
                        .HasColumnName("isEalryExit");

                    b.Property<TimeSpan?>("LeaveTime")
                        .HasColumnName("leaveTime");

                    b.Property<string>("Notes")
                        .HasColumnName("notes");

                    b.Property<byte?>("ParticipationsCount")
                        .HasColumnName("participationsCount");

                    b.Property<byte?>("ParticipationsQuality")
                        .HasColumnName("participationsQuality");

                    b.Property<int?>("PeriodId")
                        .HasColumnName("periodId");

                    b.Property<string>("StudentId")
                        .HasColumnName("studentId")
                        .HasColumnType("char(10)");

                    b.HasKey("PeriodDetailId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("StudentId");

                    b.ToTable("periodsDetails");
                });

            modelBuilder.Entity("SSMS.EntityModels.PeriodFile", b =>
                {
                    b.Property<int>("PeriodFileId")
                        .HasColumnName("periodFileId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("createdBy");

                    b.Property<byte?>("DocTypeId")
                        .HasColumnName("docTypeId");

                    b.Property<string>("FilePath")
                        .HasColumnName("filePath");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsExternalLink")
                        .HasColumnName("isExternalLink");

                    b.Property<short?>("WeekPlanId")
                        .HasColumnName("weekPlanId");

                    b.HasKey("PeriodFileId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("WeekPlanId");

                    b.ToTable("periodsFiles");
                });

            modelBuilder.Entity("SSMS.EntityModels.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tokenId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceInfo")
                        .HasColumnName("deviceInfo")
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasMaxLength(32);

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(10);

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("refreshTokens");
                });

            modelBuilder.Entity("SSMS.EntityModels.RemedialProcedure", b =>
                {
                    b.Property<short>("ProcedureId")
                        .HasColumnName("procedureId");

                    b.Property<byte?>("CategoryId")
                        .HasColumnName("categoryId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("ProcedureNameAr")
                        .HasColumnName("procedureNameAr")
                        .HasMaxLength(150);

                    b.Property<string>("ProcedureNameEn")
                        .HasColumnName("procedureNameEn")
                        .HasMaxLength(150);

                    b.HasKey("ProcedureId");

                    b.ToTable("remedialProcedures");
                });

            modelBuilder.Entity("SSMS.EntityModels.School", b =>
                {
                    b.Property<byte>("SchoolId")
                        .HasColumnName("schoolID");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(250);

                    b.Property<string>("ComNum")
                        .HasColumnName("comNum")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .HasColumnName("isActive");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("SchoolNameAr")
                        .HasColumnName("schoolNameAr")
                        .HasMaxLength(150);

                    b.Property<string>("SchoolNameEn")
                        .HasColumnName("schoolNameEn")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startDate")
                        .HasColumnType("date");

                    b.HasKey("SchoolId");

                    b.ToTable("schools");
                });

            modelBuilder.Entity("SSMS.EntityModels.SchoolDayEvent", b =>
                {
                    b.Property<short>("SchoolDayEventId")
                        .HasColumnName("schoolDayEventId");

                    b.Property<byte?>("DayId")
                        .HasColumnName("dayId");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnName("endTime")
                        .HasColumnType("time(0)");

                    b.Property<string>("EventNameAr")
                        .HasColumnName("eventNameAr")
                        .HasMaxLength(50);

                    b.Property<string>("EventNameEn")
                        .HasColumnName("eventNameEn")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<byte?>("StageId")
                        .HasColumnName("stageId");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnName("startTime")
                        .HasColumnType("time(0)");

                    b.HasKey("SchoolDayEventId");

                    b.HasIndex("StageId");

                    b.ToTable("schoolDayEvents");
                });

            modelBuilder.Entity("SSMS.EntityModels.Stage", b =>
                {
                    b.Property<byte>("StageId")
                        .HasColumnName("stageId");

                    b.Property<byte?>("BranchId")
                        .HasColumnName("branchId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("StageNameAr")
                        .HasColumnName("stageNameAr")
                        .HasMaxLength(25);

                    b.Property<string>("StageNameEn")
                        .HasColumnName("stageNameEn")
                        .HasMaxLength(25);

                    b.HasKey("StageId");

                    b.HasIndex("BranchId");

                    b.ToTable("stages");
                });

            modelBuilder.Entity("SSMS.EntityModels.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnName("studentId")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("BirthDateG")
                        .HasColumnName("birthDateG")
                        .HasColumnType("date");

                    b.Property<string>("BirthDateH")
                        .HasColumnName("birthDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("BirthPlace")
                        .HasColumnName("birthPlace")
                        .HasMaxLength(50);

                    b.Property<byte>("CountryId")
                        .HasColumnName("countryId");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("FNameAr")
                        .HasColumnName("fNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("FNameEn")
                        .HasColumnName("fNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("GNameAr")
                        .HasColumnName("gNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("GNameEn")
                        .HasColumnName("gNameEn")
                        .HasMaxLength(20);

                    b.Property<bool?>("Gender")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("IdExpireDateG")
                        .HasColumnType("date");

                    b.Property<string>("IdExpireDateH")
                        .HasColumnName("idExpireDateH")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("IdIssuePlace")
                        .HasMaxLength(50);

                    b.Property<byte?>("IdType");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LNameAr")
                        .HasColumnName("lNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("LNameEn")
                        .HasColumnName("lNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("MNameAr")
                        .HasColumnName("mNameAr")
                        .HasMaxLength(20);

                    b.Property<string>("MNameEn")
                        .HasColumnName("mNameEn")
                        .HasMaxLength(20);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasMaxLength(15);

                    b.Property<string>("MobileMother")
                        .HasColumnName("mobileMother")
                        .HasMaxLength(15);

                    b.Property<string>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("char(10)");

                    b.Property<string>("PreviousSchool")
                        .HasColumnName("previousSchool")
                        .HasMaxLength(100);

                    b.Property<string>("SpecialNeeds")
                        .HasColumnName("specialNeeds");

                    b.HasKey("StudentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParentId");

                    b.ToTable("students");
                });

            modelBuilder.Entity("SSMS.EntityModels.StudentProcedure", b =>
                {
                    b.Property<int>("StudentProcedureId")
                        .HasColumnName("studentProcedureId");

                    b.Property<int?>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("ProcedureDate")
                        .HasColumnName("procedureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<short?>("ProcedureId")
                        .HasColumnName("procedureId");

                    b.Property<int?>("StudentViolationId")
                        .HasColumnName("studentViolationId");

                    b.HasKey("StudentProcedureId");

                    b.HasIndex("EmpJobId");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("StudentViolationId");

                    b.ToTable("studentsProcedures");
                });

            modelBuilder.Entity("SSMS.EntityModels.StudentViolation", b =>
                {
                    b.Property<int>("StudentViolationId")
                        .HasColumnName("studentViolationId");

                    b.Property<int?>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("StudentId")
                        .HasColumnName("studentId")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("ViolationDate")
                        .HasColumnName("violationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<short?>("ViolationId")
                        .HasColumnName("violationId");

                    b.HasKey("StudentViolationId");

                    b.HasIndex("EmpJobId");

                    b.HasIndex("StudentId");

                    b.HasIndex("ViolationId");

                    b.ToTable("studentsViolations");
                });

            modelBuilder.Entity("SSMS.EntityModels.Subject", b =>
                {
                    b.Property<byte>("SubjectId")
                        .HasColumnName("subjectId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<byte?>("MajorId")
                        .HasColumnName("majorId");

                    b.Property<string>("ShortNameAr")
                        .HasColumnName("shortNameAr")
                        .HasMaxLength(5);

                    b.Property<string>("ShortNameEn")
                        .HasColumnName("shortNameEn")
                        .HasMaxLength(5);

                    b.Property<string>("SubjectNameAr")
                        .HasColumnName("subjectNameAr")
                        .HasMaxLength(25);

                    b.Property<string>("SubjectNameEn")
                        .HasColumnName("subjectNameEn")
                        .HasMaxLength(25);

                    b.HasKey("SubjectId");

                    b.HasIndex("MajorId");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("SSMS.EntityModels.TeacherEdu", b =>
                {
                    b.Property<int>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<short>("GradeSubjectId")
                        .HasColumnName("gradeSubjectId");

                    b.Property<string>("ClassroomIds")
                        .HasColumnName("classroomIds")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("EmpJobId", "GradeSubjectId");

                    b.HasIndex("GradeSubjectId");

                    b.ToTable("teachersEdu");
                });

            modelBuilder.Entity("SSMS.EntityModels.TeacherQuorum", b =>
                {
                    b.Property<int>("TeacherQuorumId")
                        .HasColumnName("teacherQuorumId");

                    b.Property<int?>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<byte?>("PeriodsQuorum")
                        .HasColumnName("periodsQuorum");

                    b.Property<byte?>("SemesterId")
                        .HasColumnName("semesterId");

                    b.Property<byte?>("SubstituteQuorum")
                        .HasColumnName("substituteQuorum");

                    b.HasKey("TeacherQuorumId");

                    b.HasIndex("EmpJobId");

                    b.HasIndex("SemesterId");

                    b.ToTable("teachersQuorums");
                });

            modelBuilder.Entity("SSMS.EntityModels.TimeTable", b =>
                {
                    b.Property<int>("TimeTableId")
                        .HasColumnName("timeTableId");

                    b.Property<short>("ClassroomId")
                        .HasColumnName("classroomId");

                    b.Property<int?>("EmpJobId")
                        .HasColumnName("empJobId");

                    b.Property<short?>("GradeSubjectId")
                        .HasColumnName("gradeSubjectId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<short>("SchoolDayEventId")
                        .HasColumnName("schoolDayEventId");

                    b.HasKey("TimeTableId");

                    b.HasIndex("EmpJobId");

                    b.HasIndex("GradeSubjectId");

                    b.HasIndex("SchoolDayEventId");

                    b.ToTable("timeTables");
                });

            modelBuilder.Entity("SSMS.EntityModels.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("char(10)");

                    b.Property<byte?>("AccountStatusId")
                        .HasColumnName("accountStatusId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnName("lastActive")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("passwordHash")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("passwordSalt")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SubscribeDate")
                        .HasColumnName("subscribeDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte?>("UserTypeId")
                        .HasColumnName("userTypeId");

                    b.HasKey("UserId");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SSMS.EntityModels.UsersDocs", b =>
                {
                    b.Property<int>("UserDocId")
                        .HasColumnName("userDocId");

                    b.Property<byte>("DocTypeId")
                        .HasColumnName("docTypeId");

                    b.Property<string>("FilePath")
                        .HasColumnName("filePath")
                        .HasMaxLength(15);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userId")
                        .HasColumnType("char(10)");

                    b.HasKey("UserDocId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("usersDocs");
                });

            modelBuilder.Entity("SSMS.EntityModels.UserType", b =>
                {
                    b.Property<byte>("UserTypeId")
                        .HasColumnName("userTypeId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<string>("UserTypeName")
                        .HasColumnName("userTypeName")
                        .HasMaxLength(25);

                    b.HasKey("UserTypeId");

                    b.ToTable("userTypes");
                });

            modelBuilder.Entity("SSMS.EntityModels.VerificationCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("codeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(10);

                    b.Property<byte?>("CodeTypeId")
                        .HasColumnName("codeTypeId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime>("SentTime")
                        .HasColumnName("sentTime");

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(10);

                    b.HasKey("CodeId");

                    b.HasIndex("CodeTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("verificationCodes");
                });

            modelBuilder.Entity("SSMS.EntityModels.VerificationCodeType", b =>
                {
                    b.Property<byte>("CodeTypeId")
                        .HasColumnName("codeTypeId");

                    b.Property<string>("CodeType")
                        .HasColumnName("codeType")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.HasKey("CodeTypeId");

                    b.ToTable("verificationCodeTypes");
                });

            modelBuilder.Entity("SSMS.EntityModels.WeekPlan", b =>
                {
                    b.Property<short>("WeekPlanId")
                        .HasColumnName("weekPlanId");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<string>("Homework")
                        .HasColumnName("homework");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<int?>("LessonId")
                        .HasColumnName("lessonId");

                    b.Property<string>("Quiz")
                        .HasColumnName("quiz");

                    b.Property<int>("TimeTableId")
                        .HasColumnName("timeTableId");

                    b.Property<short?>("WeekId")
                        .HasColumnName("weekId");

                    b.HasKey("WeekPlanId");

                    b.HasIndex("LessonId");

                    b.HasIndex("TimeTableId");

                    b.HasIndex("WeekId");

                    b.ToTable("weeksPlans");
                });

            modelBuilder.Entity("SSMS.EntityModels.AcademicSemester", b =>
                {
                    b.HasOne("SSMS.EntityModels.AcademicYear", "Year")
                        .WithMany("AcademicSemesters")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_academicSemesters_academicYears");
                });

            modelBuilder.Entity("SSMS.EntityModels.AcademicWeek", b =>
                {
                    b.HasOne("SSMS.EntityModels.AcademicSemester", "Semester")
                        .WithMany("AcademicWeeks")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_academicWeeks_academicSemesters");
                });

            modelBuilder.Entity("SSMS.EntityModels.Branch", b =>
                {
                    b.HasOne("SSMS.EntityModels.School", "School")
                        .WithMany("Branches")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_branches_schools");
                });

            modelBuilder.Entity("SSMS.EntityModels.Classrooms", b =>
                {
                    b.HasOne("SSMS.EntityModels.Grade", "Grade")
                        .WithMany("Classrooms")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_classrooms_grades");
                });

            modelBuilder.Entity("SSMS.EntityModels.ClassStudent", b =>
                {
                    b.HasOne("SSMS.EntityModels.Classrooms", "Classroom")
                        .WithMany("ClassesStudents")
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("FK_classesStudents_classrooms");

                    b.HasOne("SSMS.EntityModels.Student", "Student")
                        .WithMany("ClassesStudents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_classesStudents_students");

                    b.HasOne("SSMS.EntityModels.AcademicYear", "Year")
                        .WithMany("ClassesStudents")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_classesStudents_academicYears");
                });

            modelBuilder.Entity("SSMS.EntityModels.Employee", b =>
                {
                    b.HasOne("SSMS.EntityModels.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_employees_countries");

                    b.HasOne("SSMS.EntityModels.User", "Emp")
                        .WithOne("_Employee")
                        .HasForeignKey("SSMS.EntityModels.Employee", "EmpId")
                        .HasConstraintName("FK_employees_users");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeAction", b =>
                {
                    b.HasOne("SSMS.EntityModels.Action", "Action")
                        .WithMany("EmployeesActions")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_employeesActions_actions");

                    b.HasOne("SSMS.EntityModels.EmployeeJob", "EmpJob")
                        .WithMany("EmployeesActions")
                        .HasForeignKey("EmpJobId")
                        .HasConstraintName("FK_employeesActions_employeesJobs");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeFinance", b =>
                {
                    b.HasOne("SSMS.EntityModels.Employee", "Emp")
                        .WithOne("EmployeesFinance")
                        .HasForeignKey("SSMS.EntityModels.EmployeeFinance", "EmpId")
                        .HasConstraintName("FK_employeesFinance_employees");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeHr", b =>
                {
                    b.HasOne("SSMS.EntityModels.Employee", "Emp")
                        .WithOne("EmployeesHr")
                        .HasForeignKey("SSMS.EntityModels.EmployeeHr", "EmpId")
                        .HasConstraintName("FK_EmployeesHR_employees");
                });

            modelBuilder.Entity("SSMS.EntityModels.EmployeeJob", b =>
                {
                    b.HasOne("SSMS.EntityModels.Department", "Department")
                        .WithMany("EmployeesJobs")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_employeesJobs_departments");

                    b.HasOne("SSMS.EntityModels.Employee", "Emp")
                        .WithMany("EmployeesJobs")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_employeesJobs_employees");

                    b.HasOne("SSMS.EntityModels.Job", "Job")
                        .WithMany("EmployeesJobs")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_employeesJobs_jobs");
                });

            modelBuilder.Entity("SSMS.EntityModels.Grade", b =>
                {
                    b.HasOne("SSMS.EntityModels.Stage", "Stage")
                        .WithMany("Grades")
                        .HasForeignKey("StageId")
                        .HasConstraintName("FK_grades_stages");
                });

            modelBuilder.Entity("SSMS.EntityModels.GradesSubjects", b =>
                {
                    b.HasOne("SSMS.EntityModels.Grade", "Grade")
                        .WithMany("GradesSubjects")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_gradesSubjects_grades");

                    b.HasOne("SSMS.EntityModels.Subject", "Subject")
                        .WithMany("GradesSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_gradesSubjects_subjects");
                });

            modelBuilder.Entity("SSMS.EntityModels.JobAction", b =>
                {
                    b.HasOne("SSMS.EntityModels.Action", "Action")
                        .WithMany("JobsActions")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_jobsActions_actions");

                    b.HasOne("SSMS.EntityModels.Job", "Job")
                        .WithMany("JobsActions")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_jobsActions_jobs");
                });

            modelBuilder.Entity("SSMS.EntityModels.LessonFile", b =>
                {
                    b.HasOne("SSMS.EntityModels.DocType", "DocType")
                        .WithMany("LessonsFiles")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("FK_lessonsFiles_docTypes");

                    b.HasOne("SSMS.EntityModels.Lesson", "Lesson")
                        .WithMany("LessonsFiles")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_lessonsFiles_lessons");
                });

            modelBuilder.Entity("SSMS.EntityModels.Parent", b =>
                {
                    b.HasOne("SSMS.EntityModels.Country", "Country")
                        .WithMany("Parents")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_parents_countries");

                    b.HasOne("SSMS.EntityModels.User", "_Parent")
                        .WithOne("_Parent")
                        .HasForeignKey("SSMS.EntityModels.Parent", "ParentId")
                        .HasConstraintName("FK_parents_users");
                });

            modelBuilder.Entity("SSMS.EntityModels.Period", b =>
                {
                    b.HasOne("SSMS.EntityModels.Classrooms", "Classeroom")
                        .WithMany("Periods")
                        .HasForeignKey("ClasseroomId")
                        .HasConstraintName("FK_periods_classrooms");

                    b.HasOne("SSMS.EntityModels.EmployeeJob", "EmpJob")
                        .WithMany("Periods")
                        .HasForeignKey("EmpJobId")
                        .HasConstraintName("FK_periods_employeesJobs");

                    b.HasOne("SSMS.EntityModels.GradesSubjects", "GradeSubject")
                        .WithMany("Periods")
                        .HasForeignKey("GradeSubjectId")
                        .HasConstraintName("FK_periods_gradesSubjects");

                    b.HasOne("SSMS.EntityModels.SchoolDayEvent", "SchoolDayEvent")
                        .WithMany("Periods")
                        .HasForeignKey("SchoolDayEventId")
                        .HasConstraintName("FK_periods_schoolDayEvents");

                    b.HasOne("SSMS.EntityModels.AcademicSemester", "Semester")
                        .WithMany("Periods")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_periods_academicSemesters");
                });

            modelBuilder.Entity("SSMS.EntityModels.PeriodDetails", b =>
                {
                    b.HasOne("SSMS.EntityModels.Period", "Period")
                        .WithMany("PeriodsDetails")
                        .HasForeignKey("PeriodId")
                        .HasConstraintName("FK_periodsDetails_periods");

                    b.HasOne("SSMS.EntityModels.Student", "Student")
                        .WithMany("PeriodsDetails")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_periodsDetails_students");
                });

            modelBuilder.Entity("SSMS.EntityModels.PeriodFile", b =>
                {
                    b.HasOne("SSMS.EntityModels.DocType", "DocType")
                        .WithMany("PeriodsFiles")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("FK_periodsFiles_docTypes");

                    b.HasOne("SSMS.EntityModels.WeekPlan", "WeekPlan")
                        .WithMany("PeriodsFiles")
                        .HasForeignKey("WeekPlanId")
                        .HasConstraintName("FK_periodsFiles_weeksPlans");
                });

            modelBuilder.Entity("SSMS.EntityModels.RefreshToken", b =>
                {
                    b.HasOne("SSMS.EntityModels.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_users_refreshTokens");
                });

            modelBuilder.Entity("SSMS.EntityModels.SchoolDayEvent", b =>
                {
                    b.HasOne("SSMS.EntityModels.Stage", "Stage")
                        .WithMany("SchoolDayEvents")
                        .HasForeignKey("StageId")
                        .HasConstraintName("FK_schoolDayEvents_stages");
                });

            modelBuilder.Entity("SSMS.EntityModels.Stage", b =>
                {
                    b.HasOne("SSMS.EntityModels.Branch", "Branch")
                        .WithMany("Stages")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_stages_branches");
                });

            modelBuilder.Entity("SSMS.EntityModels.Student", b =>
                {
                    b.HasOne("SSMS.EntityModels.Country", "Country")
                        .WithMany("Students")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_students_countries");

                    b.HasOne("SSMS.EntityModels.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_students_parents");

                    b.HasOne("SSMS.EntityModels.User", "_Student")
                        .WithOne("_Student")
                        .HasForeignKey("SSMS.EntityModels.Student", "StudentId")
                        .HasConstraintName("FK_students_users");
                });

            modelBuilder.Entity("SSMS.EntityModels.StudentProcedure", b =>
                {
                    b.HasOne("SSMS.EntityModels.EmployeeJob", "EmpJob")
                        .WithMany("StudentsProcedures")
                        .HasForeignKey("EmpJobId")
                        .HasConstraintName("FK_studentsProcedures_employeesJobs");

                    b.HasOne("SSMS.EntityModels.RemedialProcedure", "Procedure")
                        .WithMany("StudentsProcedures")
                        .HasForeignKey("ProcedureId")
                        .HasConstraintName("FK_studentsProcedures_remedialProcedures");

                    b.HasOne("SSMS.EntityModels.StudentViolation", "StudentViolation")
                        .WithMany("StudentsProcedures")
                        .HasForeignKey("StudentViolationId")
                        .HasConstraintName("FK_studentsProcedures_studentsViolations");
                });

            modelBuilder.Entity("SSMS.EntityModels.StudentViolation", b =>
                {
                    b.HasOne("SSMS.EntityModels.EmployeeJob", "EmpJob")
                        .WithMany("StudentsViolations")
                        .HasForeignKey("EmpJobId")
                        .HasConstraintName("FK_studentsViolations_employeesJobs");

                    b.HasOne("SSMS.EntityModels.Student", "Student")
                        .WithMany("StudentsViolations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_studentsViolations_students");

                    b.HasOne("SSMS.EntityModels.BehavioralViolation", "Violation")
                        .WithMany("StudentsViolations")
                        .HasForeignKey("ViolationId")
                        .HasConstraintName("FK_studentsViolations_behavioralViolations");
                });

            modelBuilder.Entity("SSMS.EntityModels.Subject", b =>
                {
                    b.HasOne("SSMS.EntityModels.Major", "Major")
                        .WithMany("Subjects")
                        .HasForeignKey("MajorId")
                        .HasConstraintName("FK_subjects_majors");
                });

            modelBuilder.Entity("SSMS.EntityModels.TeacherEdu", b =>
                {
                    b.HasOne("SSMS.EntityModels.EmployeeJob", "EmpJob")
                        .WithMany("TeachersEdu")
                        .HasForeignKey("EmpJobId")
                        .HasConstraintName("FK_teachersEdu_employeesJobs");

                    b.HasOne("SSMS.EntityModels.GradesSubjects", "GradeSubject")
                        .WithMany("TeachersEdu")
                        .HasForeignKey("GradeSubjectId")
                        .HasConstraintName("FK_teachersEdu_gradesSubjects");
                });

            modelBuilder.Entity("SSMS.EntityModels.TeacherQuorum", b =>
                {
                    b.HasOne("SSMS.EntityModels.EmployeeJob", "EmpJob")
                        .WithMany("TeachersQuorums")
                        .HasForeignKey("EmpJobId")
                        .HasConstraintName("FK_teachersQuorums_employeesJobs");

                    b.HasOne("SSMS.EntityModels.AcademicSemester", "Semester")
                        .WithMany("TeachersQuorums")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_teachersQuorums_academicSemesters");
                });

            modelBuilder.Entity("SSMS.EntityModels.TimeTable", b =>
                {
                    b.HasOne("SSMS.EntityModels.EmployeeJob", "EmpJob")
                        .WithMany("TimeTable")
                        .HasForeignKey("EmpJobId")
                        .HasConstraintName("FK_timeTable_employeesJobs");

                    b.HasOne("SSMS.EntityModels.GradesSubjects", "GradeSubject")
                        .WithMany("TimeTable")
                        .HasForeignKey("GradeSubjectId")
                        .HasConstraintName("FK_timeTable_gradesSubjects");

                    b.HasOne("SSMS.EntityModels.SchoolDayEvent", "SchoolDayEvent")
                        .WithMany("TimeTable")
                        .HasForeignKey("SchoolDayEventId")
                        .HasConstraintName("FK_timeTable_schoolDayEvents");
                });

            modelBuilder.Entity("SSMS.EntityModels.User", b =>
                {
                    b.HasOne("SSMS.EntityModels.AccountStatus", "AccountStatus")
                        .WithMany("Users")
                        .HasForeignKey("AccountStatusId")
                        .HasConstraintName("FK_users_accountStatus");

                    b.HasOne("SSMS.EntityModels.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_users_userTypes");
                });

            modelBuilder.Entity("SSMS.EntityModels.UsersDocs", b =>
                {
                    b.HasOne("SSMS.EntityModels.DocType", "DocType")
                        .WithMany("UsersDocs")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("FK_usersDocs_docTypes");

                    b.HasOne("SSMS.EntityModels.User", "User")
                        .WithMany("UsersDocs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_usersDocs_users");
                });

            modelBuilder.Entity("SSMS.EntityModels.VerificationCode", b =>
                {
                    b.HasOne("SSMS.EntityModels.VerificationCodeType", "VerificationCodeType")
                        .WithMany("VerificationCodes")
                        .HasForeignKey("CodeTypeId")
                        .HasConstraintName("FK_verificationCodeTypes_verificationCodes");

                    b.HasOne("SSMS.EntityModels.User", "User")
                        .WithMany("VerificationCodes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_users_verificationCodes");
                });

            modelBuilder.Entity("SSMS.EntityModels.WeekPlan", b =>
                {
                    b.HasOne("SSMS.EntityModels.Lesson", "Lesson")
                        .WithMany("WeeksPlans")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_weeksPlans_lessons");

                    b.HasOne("SSMS.EntityModels.TimeTable", "TimeTable")
                        .WithMany("WeeksPlans")
                        .HasForeignKey("TimeTableId")
                        .HasConstraintName("FK_weeksPlans_timeTable");

                    b.HasOne("SSMS.EntityModels.AcademicWeek", "Week")
                        .WithMany("WeeksPlans")
                        .HasForeignKey("WeekId")
                        .HasConstraintName("FK_weeksPlans_academicWeeks");
                });
#pragma warning restore 612, 618
        }
    }
}
